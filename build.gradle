/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    id "org.springframework.boot" version "2.0.4.RELEASE"

    id "idea"
}

bootJar {
    baseName = 'backend'
    version = '1.0.0'
}

mainClassName = 'com.overseaslabs.examples.web.App'

dependencies {
    compile(
            [group: 'com.overseaslabs.example', name: 'entities', version: '1.0.0'],
            [group: 'com.overseaslabs.example', name: 'utils', version: '1.0.1'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.4.RELEASE'],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '2.0.4.RELEASE'],
            [group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.6'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.0.4.RELEASE'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.0.4.RELEASE'],
            [group: 'redis.clients', name: 'jedis', version: '2.9.0'],
    )

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.4.RELEASE') {
        exclude group: 'junit'
    }

    testCompile(
            [group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'],
            [group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1']
    )
}

test {
    useJUnitPlatform()
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                resolveConfiguration(configuration)
            }
            subProject.configurations.each { configuration ->
                resolveConfiguration(configuration)
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
        url "s3://overseaslabs-artifacts-public"
        credentials(AwsCredentials) {
            //the credentials come from env vars when building the project (read-only)

            accessKey System.env.AWS_ACCESS_KEY ?: AWS_ACCESS_KEY
            secretKey System.env.AWS_SECRET_KEY ?: AWS_SECRET_KEY
        }
    }
}